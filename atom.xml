<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yhking Person Site</title>
  
  
  <link href="https://yhking.tk/atom.xml" rel="self"/>
  
  <link href="https://yhking.tk/"/>
  <updated>2021-05-11T04:56:25.996Z</updated>
  <id>https://yhking.tk/</id>
  
  <author>
    <name>yhking</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言复习新知</title>
    <link href="https://yhking.tk/2021/05/08/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E6%96%B0%E7%9F%A5/"/>
    <id>https://yhking.tk/2021/05/08/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E6%96%B0%E7%9F%A5/</id>
    <published>2021-05-08T02:40:14.963Z</published>
    <updated>2021-05-11T04:56:25.996Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>C语言的重要程度，自然不用说，数据结构这门课，一般都是用C/C++语言来编写程序案例，所以题目上一般也都要求使用C/C++编写程序，只能又看了一遍C，自然C++比C好用，但是C++现在也没时间重新学习，所以C语言是最佳选择，那么接下来就看一下新get到的知识。</p></blockquote><span id="more"></span><h3 id="1-什么是计算机程序？"><a href="#1-什么是计算机程序？" class="headerlink" title="1. 什么是计算机程序？"></a>1. 什么是计算机程序？</h3><p>所谓程序就是一组计算机能识别和执行的指令。</p><h3 id="2-Hello-world"><a href="#2-Hello-world" class="headerlink" title="2. Hello world"></a>2. Hello world</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is a C program.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#include&lt;stdio.h&gt; 的作用是用来提供输入输出信息的，也叫<strong>预处理指令</strong>。stdio.h是系统提供的一个文件名，stdio是standard input &amp; output的缩写，文件后缀.h的意思是头文件(header file)。如果没有#include指令，printf函数将不可执行。</p><h3 id="3-函数声明"><a href="#3-函数声明" class="headerlink" title="3. 函数声明"></a>3. 函数声明</h3><p>在要用到还没定义的函数时要先声明，例：int max(int x, int y); </p><p>或者把此方法写在前面，这样便不用声明了。</p><h3 id="4-用C语言构建一个可执行程序的流程"><a href="#4-用C语言构建一个可执行程序的流程" class="headerlink" title="4. 用C语言构建一个可执行程序的流程"></a>4. 用C语言构建一个可执行程序的流程</h3><p><img src="/../images/C/C%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg"></p><p>首先，我们先用C语言把源代码写好，然后交给C语言编译器。C语言编译器内部分为前端和后端。</p><h4 id="4-1-编译器前端"><a href="#4-1-编译器前端" class="headerlink" title="4.1 编译器前端"></a>4.1 编译器前端</h4><p>前端负责将C语言代码进行词法和语法上的解析，然后可以生成中间代码。</p><p>中间代码这部分不是必须的，但是它能够为程序的跨平台移植带来诸多好处。比如，同样的一份C语言源代码在一台计算机上编译完之后，生成一套中间代码。然后针对不同的目标平台（比如要将这一套代码分别编译成 ARM 处理器的二进制机器码、MIPS 处理器的二进制机器码以及 x86 处理器的二进制机器码），只需要编写相应目标平台的编译器后端即可。</p><p>所以，这么做就可以把编译器的前端与后端剥离开来（这在软件工程上又可称为解耦合），不同处理器厂商可以针对自家的处理器特性，对中间代码生成到目标二进制代码的过程再度进行优化。</p><h4 id="4-2-编译器后端"><a href="#4-2-编译器后端" class="headerlink" title="4.2 编译器后端"></a>4.2 编译器后端</h4><p>接下来，由C语言编译器后端生成源文件相应的目标文件。</p><p>目标文件在 Windows 系统上往往是<code>.obj</code>文件，而在 Unix/Linux 系统上往往是<code>.o</code>文件，C语言的源文件在所有平台上都统一用<code>.c</code>文件表示。</p><h4 id="4-3-链接器"><a href="#4-3-链接器" class="headerlink" title="4.3 链接器"></a>4.3 链接器</h4><p>最后，对于各个独立的目标文件，通过连接器将它们合并成一个最终可执行文件。</p><p>连接器与C语言编译器是完全独立的。所以，只要最终目标代码的 ABI（应用程序二进制接口）一致，我们可以把各个编译器生成的目标代码都放在一起，最后连接生成一个可执行文件。比如：</p><ul><li>有些源代码可用 <a href="http://c.biancheng.net/gcc/">GCC</a> 编译；</li><li>有些使用 Clang 编译；</li><li>还有些<a href="http://c.biancheng.net/asm/">汇编语言</a>源文件可直接通过汇编器生成目标代码。</li></ul><p>最后将所有这些生成出来的目标代码连接为可执行文件。最终用户可以在当前的操作系统上加载可执行文件进行执行。操作系统利用加载器将可执行文件中相关的机器码存放到内存中来执行应用程序</p><h3 id="5-程序设计的步骤"><a href="#5-程序设计的步骤" class="headerlink" title="5. 程序设计的步骤"></a>5. 程序设计的步骤</h3><ol><li><strong>问题分析</strong>    建立模型</li><li><strong>设计算法</strong>    一般用流程图表示解题的步骤</li><li><strong>编写程序</strong>    根据算法，用高级语言编写出源代码</li><li><strong>对源程序进行编译、翻译和连接</strong>    得到可执行文件</li><li><strong>运行程序，分析结果</strong>    得到运行结果</li></ol><h3 id="6-什么是算法"><a href="#6-什么是算法" class="headerlink" title="6. 什么是算法"></a>6. 什么是算法</h3><ol><li><p>什么是算法</p><p>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题。</p></li><li><p>算法的特性</p><p>有穷性、确定性、有零个或多个输入、有一个或多个输出、有效性</p></li><li><p>怎样表示一个算法</p><p>3.1  用自然语言表示</p><p>3.2  用流程图表示</p><p>3.3  用N-S图表示</p><p>3.4  用伪代码表示</p><p>3.5  用计算机语言表示(正常的程序)</p></li></ol><h3 id="7-符号常量"><a href="#7-符号常量" class="headerlink" title="7. 符号常量"></a>7. 符号常量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> PI 3.1416</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> N 3</span></span><br></pre></td></tr></table></figure><p>本文件从此行开始PI都代表3.1416。</p><h3 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8. 数据类型"></a>8. 数据类型</h3><ol><li>基本类型</li></ol><table><thead><tr><th align="center">说  明</th><th align="center">字符型</th><th align="center">短整型</th><th align="center">整型</th><th align="center">长整型</th><th align="center">单精度浮点型</th><th align="center">双精度浮点型</th></tr></thead><tbody><tr><td align="center">数据类型</td><td align="center">char</td><td align="center">short</td><td align="center">int</td><td align="center">long</td><td align="center">float</td><td align="center">double</td></tr><tr><td align="center">长  度</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">8</td></tr></tbody></table><ol start="2"><li>派生类型</li></ol><table><thead><tr><th align="center">说  明</th><th align="center">指针类型</th><th align="center">数组类型</th><th align="center">结构体类型</th><th align="center">共用体类型</th><th align="center">函数类型</th></tr></thead><tbody><tr><td align="center">数据类型</td><td align="center">*</td><td align="center">[ ]</td><td align="center">struct</td><td align="center">union</td><td align="center"></td></tr></tbody></table><h3 id="9-字符与字符代码"><a href="#9-字符与字符代码" class="headerlink" title="9. 字符与字符代码"></a>9. 字符与字符代码</h3><p>字符是以整数类型形式(字符的ASCII代码)存放在内存单元中的。</p><h4 id="9-1-常见的值"><a href="#9-1-常见的值" class="headerlink" title="9.1 常见的值"></a>9.1 常见的值</h4><p>‘A’ 的ASCII 代码是十进制数65，二进制形式1000001。</p><p>‘a’ 的ASCII 代码是十进制数97，二进制形式1100001。</p><p>‘1’ 的ASCII 代码是十进制数49，二进制形式0110001。</p><p>‘ ‘ 的ASCII 代码是十进制数32，二进制形式0100001。</p><p>‘%’ 的ASCII 代码是十进制数37，二进制形式0100101。</p><p>‘\n’ 的ASCII 代码是十进制数10，二进制形式0001010。</p><h4 id="9-2-字符变量"><a href="#9-2-字符变量" class="headerlink" title="9.2 字符变量"></a>9.2 字符变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;?&#x27;</span>;<span class="comment">//ASCII代码是63</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %c\n&quot;</span>,c,c);</span><br><span class="line"><span class="comment">//输出结果是 63 ？</span></span><br></pre></td></tr></table></figure><h3 id="10-C运算符"><a href="#10-C运算符" class="headerlink" title="10. C运算符"></a>10. C运算符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">算数运算符(+ - * / % ++ --)</span><br><span class="line">关系运算符(&gt; &lt; == &gt;= &lt;= !=)</span><br><span class="line">逻辑运算符(! &amp;&amp; ||)</span><br><span class="line">位运算符(&lt;&lt; &gt;&gt; ~ | ^ &amp;)</span><br><span class="line">赋值运算符    (=)</span><br><span class="line">条件运算符(?:)    </span><br><span class="line">指针运算符(* 和 &amp;)</span><br><span class="line">求字节运算符(<span class="keyword">sizeof</span>)    </span><br><span class="line">成员运算符(.-&gt;)</span><br><span class="line">下标运算符([ ])</span><br></pre></td></tr></table></figure><h3 id="11-C数组"><a href="#11-C数组" class="headerlink" title="11. C数组"></a>11. C数组</h3><ol><li><p>一维数组定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">3</span>+<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>如下面这样定义是<strong>错误</strong>的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> a[n];</span><br></pre></td></tr></table></figure></li><li><p>一维数组初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;<span class="comment">//后面的自动补 0</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;<span class="comment">//初始化数组元素全为 0</span></span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;<span class="comment">//可不写大小，会自动判断</span></span><br></pre></td></tr></table></figure></li><li><p>定义二维数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a[<span class="number">3</span>][<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>二维数组初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;&#125;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123; &#125;,&#123;<span class="number">3</span>&#125;&#125;<span class="comment">//不赋初值的自动补 0</span></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;<span class="comment">//一维可省</span></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">3</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>&#125;,&#123; &#125;,&#123;<span class="number">0</span>,<span class="number">10</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义字符数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">4</span>]=&#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> c[]=&#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>&#125;;<span class="comment">//也可省略</span></span><br></pre></td></tr></table></figure><p>C系统在用字符数组存储<strong>字符串常量</strong>时会自动加一个\0作为结束符。\0在ASCII码中是一个空操作符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[]=&#123;<span class="string">&quot;hello world!&quot;</span>&#125;;<span class="comment">//花括号可省去</span></span><br></pre></td></tr></table></figure></li><li><p>字符数组的输入输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,c);<span class="comment">//无需用地址符 &amp;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,c);<span class="comment">//s应该是string</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="12-C函数"><a href="#12-C函数" class="headerlink" title="12. C函数"></a>12. C函数</h3><p>可用数组名作为函数参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span> <span class="built_in">array</span>[<span class="number">10</span>])</span></span>;</span><br><span class="line"><span class="comment">//函数调用</span></span><br><span class="line"><span class="keyword">float</span> score[<span class="number">10</span>];</span><br><span class="line">aver = average(score);</span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span> <span class="built_in">array</span>[<span class="number">10</span>])</span></span>&#123;</span><br><span class="line">  函数体。。。  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>形参定义时可不指定数组大小。</p><p>如：float average(float array[ ])</p><p>*注1： 在对源程序进行编译时，编译系统会把形式参数数组处理为指针变量(即float array[ ]转换为float *array)，该指针变量用来接收实参数组传过来的地址。二者是等价的。</p><p>*注2：用数组名作为函数实参时，不是把数组元素的值传递给形参，而是把实参数组的首元素地址传递给形参数组。</p><ul><li>为了便于区别全局变量和局部变量，在C程序设计人员中有一个习惯(但非规定)，将全局变量名的第1个字母大写表示。</li><li>自动变量auto，不带默认为auto模式。</li><li>静态变量static，只赋值一次，改变以后，下次再运行到，值就是已改变的值。</li></ul><h3 id="13-指针"><a href="#13-指针" class="headerlink" title="13. 指针"></a>13. 指针</h3><h4 id="13-1-一切都是地址"><a href="#13-1-一切都是地址" class="headerlink" title="13.1 一切都是地址"></a>13.1 一切都是地址</h4><p>C语言用变量来存储数据，用函数来定义一段可以重复使用的代码，它们最终都要放到内存中才能供 CPU 使用。</p><p>数据和代码都以二进制的形式存储在内存中，计算机无法从格式上区分某块内存到底存储的是数据还是代码。当程序被加载到内存后，操作系统会给不同的内存块指定不同的权限，拥有读取和执行权限的内存块就是代码，而拥有读取和写入权限（也可能只有读取权限）的内存块就是数据。</p><p>CPU 只能通过地址来取得内存中的代码和数据，程序在执行过程中会告知 CPU 要执行的代码以及要读写的数据的地址。如果程序不小心出错，或者开发者有意为之，在 CPU 要写入数据时给它一个代码区域的地址，就会发生内存访问错误。这种内存访问错误会被硬件和操作系统拦截，强制程序崩溃，程序员没有挽救的机会。</p><p>CPU 访问内存时需要的是地址，而不是变量名和函数名！变量名和函数名只是地址的一种助记符，当源文件被编译和链接成可执行程序后，它们都会被替换成地址。编译和链接过程的一项重要任务就是找到这些名称所对应的地址。</p><p>数据在内存中的地址也称为<a href="http://c.biancheng.net/c/80/">指针</a>，如果一个变量存储了一份数据的指针，我们就称它为<strong>指针变量</strong>。</p><p>在C语言中，允许用一个变量来存放指针，这种变量称为指针变量。指针变量的值就是某份数据的地址，这样的一份数据可以是数组、字符串、函数，也可以是另外的一个普通变量或指针变量。</p><p>现在假设有一个 char 类型的变量 c，它存储了字符 ‘K’（ASCII码为十进制数 75），并占用了地址为 0X11A 的内存（地址通常用十六进制表示）。另外有一个指针变量 p，它的值为 0X11A，正好等于变量 c 的地址，这种情况我们就称 p 指向了 c，或者说 p 是指向变量 c 的指针。</p><p><img src="/../images/C/pc.png"></p><h4 id="13-2-定义指针变量"><a href="#13-2-定义指针变量" class="headerlink" title="13.2 定义指针变量"></a>13.2 定义指针变量</h4><p>定义指针变量与定义普通变量非常类似，不过要在变量名前面加星号<code>*</code>，格式为：</p><p>datatype *name;</p><p>或者</p><p>datatype *name = value;</p><p><code>*</code>表示这是一个指针变量，<code>datatype</code>表示该指针变量所指向的数据的类型 。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p1;</span><br></pre></td></tr></table></figure><p>p1 是一个指向 int 类型数据的指针变量，至于 p1 究竟指向哪一份数据，应该由赋予它的值决定。再如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;<span class="keyword">int</span> *p_a = &amp;a;</span><br></pre></td></tr></table></figure><p>在定义指针变量 p_a 的同时对它进行初始化，并将变量 a 的地址赋予它，此时 p_a 就指向了 a。值得注意的是，p_a 需要的一个地址，a 前面必须要加取地址符<code>&amp;</code>，否则是不对的。</p><p>指针变量也可以连续定义，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *a, *b, *c;  <span class="comment">//a、b、c 的类型都是 int*</span></span><br></pre></td></tr></table></figure><h4 id="13-3-通过指针变量取得数据"><a href="#13-3-通过指针变量取得数据" class="headerlink" title="13.3 通过指针变量取得数据"></a>13.3 通过指针变量取得数据</h4><p>指针变量存储了数据的地址，通过指针变量能够获得该地址上的数据，格式为：</p><p>*pointer;</p><p>这里的<code>*</code>称为指针运算符，用来取得某个地址上的数据，请看下面的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, %d\n&quot;</span>, a, *p);</span><br><span class="line"><span class="comment">//两种方式都可以输出a的值    </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>15, 15</p><h4 id="13-4-关于-和-amp"><a href="#13-4-关于-和-amp" class="headerlink" title="13.4 关于 * 和 &amp;"></a>13.4 关于 * 和 &amp;</h4><p>假设有一个 int 类型的变量 a，pa 是指向它的指针，那么<code>*&amp;a</code>和<code>&amp;*pa</code>分别是什么意思呢？</p><p><code>*&amp;a</code>可以理解为<code>*(&amp;a)</code>，<code>&amp;a</code>表示取变量 a 的地址（等价于 pa），<code>*(&amp;a)</code>表示取这个地址上的数据（等价于 *pa），绕来绕去，又回到了原点，<code>*&amp;a</code>仍然等价于 a。</p><p><code>&amp;*pa</code>可以理解为<code>&amp;(*pa)</code>，<code>*pa</code>表示取得 pa 指向的数据（等价于 a），<code>&amp;(*pa)</code>表示数据的地址（等价于 &amp;a），所以<code>&amp;*pa</code>等价于 pa。</p><h4 id="13-5-C数组指针"><a href="#13-5-C数组指针" class="headerlink" title="13.5 C数组指针"></a>13.5 C数组指针</h4><p>数组（Array）是一系列具有相同类型的数据的集合，每一份数据叫做一个数组元素（Element）。数组中的所有元素在内存中是连续排列的，整个数组占用的是一块内存。以<code>int arr[] = &#123; 99, 15, 100, 888, 252 &#125;;</code>为例，该数组在内存中的分布如下图所示：</p><p><img src="/../images/C/1J35014B.jpg"></p><p>定义数组时，要给出数组名和数组长度，数组名可以认为是一个<a href="http://c.biancheng.net/c/80/">指针</a>，它指向数组的第 0 个元素。在C语言中，我们将第 0 个元素的地址称为数组的首地址。以上面的数组为例，下图是 arr 的指向：</p><p><img src="/../images/C/1J3506331.jpg"></p><p>下面的例子演示了如何以指针的方式遍历数组元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">99</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">888</span>, <span class="number">252</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);  <span class="comment">//求数组长度</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, *(arr+i) );  <span class="comment">//*(arr+i)等价于arr[i]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>运行结果：<br>99 15 100 888 252</p><blockquote><p>arr 是<code>int*</code>类型的指针，每次加 1 时它自身的值会增加 sizeof(int)，加 i 时自身的值会增加 sizeof(int) * i</p></blockquote><p>数组指针指向的是数组中的一个具体元素，而不是整个数组，所以数组指针的类型和数组元素的类型有关，上面的例子中，p 指向的数组元素是 int 类型，所以 p 的类型必须也是<code>int *</code>。</p><p>反过来想，p 并不知道它指向的是一个数组，p 只知道它指向的是一个整数，究竟如何使用 p 取决于程序员的编码。</p><p>更改上面的代码，使用数组指针来遍历数组元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">99</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">888</span>, <span class="number">252</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> i, *p = arr, len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, *(p+i) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组在内存中只是数组元素的简单排列，没有开始和结束标志，在求数组的长度时不能使用<code>sizeof(p) / sizeof(int)</code>，因为 p 只是一个指向 int 类型的指针，编译器并不知道它指向的到底是一个整数还是一系列整数（数组），所以 sizeof(p) 求得的是 p 这个指针变量本身所占用的字节数，而不是整个数组占用的字节数。</p><p>也就是说，根据数组指针不能逆推出整个数组元素的个数，以及数组从哪里开始、到哪里结束等信息。不像字符串，数组本身也没有特定的结束标志，如果不知道数组的长度，那么就无法遍历整个数组。</p><h4 id="13-6-C字符串指针"><a href="#13-6-C字符串指针" class="headerlink" title="13.6 C字符串指针"></a>13.6 C字符串指针</h4><p>使用指针的方式来输出字符串：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *pstr = str;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str), i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用*(pstr+i)</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *(pstr+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">//使用pstr[i]</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, pstr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">//使用*(str+i)</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *(str+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>123abc</p><p>123abc</p><p>123abc</p><p>除了字符数组，C语言还支持另外一种表示字符串的方法，就是直接使用一个指针指向字符串，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *str = <span class="string">&quot;123abc&quot;</span>;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *str;str = <span class="string">&quot;123abc&quot;</span>;</span><br></pre></td></tr></table></figure><p>字符串中的所有字符在内存中是连续排列的，str 指向的是字符串的第 0 个字符；我们通常将第 0  个字符的地址称为字符串的首地址。字符串中每个字符的类型都是<code>char</code>，所以 str 的类型也必须是<code>char *</code>。</p><p><strong>到底使用字符数组还是字符串常量</strong></p><p>在编程过程中如果只涉及到对字符串的读取，那么字符数组和字符串常量都能够满足要求；如果有写入（修改）操作，那么只能使用字符数组，不能使用字符串常量。</p><h4 id="13-7-指针数组作main函数的形参"><a href="#13-7-指针数组作main函数的形参" class="headerlink" title="13.7 指针数组作main函数的形参"></a>13.7 指针数组作main函数的形参</h4><p>不带形参的main函数一般写成：<br><code>int main()</code> 或 <code>int main(void)</code><br>表示mian函数没有参数，调用mian函数时不需要给出实参。</p><p>而main函数有形参的形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br></pre></td></tr></table></figure><p>其中argc和argv就是main函数的形参。它们是程序的“命令行参数”。argc(argument count 的缩写，意思是参数个数)，argv(argument vector 的缩写，意思是参数向量)，它是一个* char指针数组，数组中的每个元素(其值为指针)指向命令行的一个字符串的首地址。</p><blockquote><p>如果用带参数的main函数，其第一个形参必须是int类型，用来接收形参个数，第二个参数必须是字符指针数组，用来接收从操作系统命令行传来的字符串中首字符的地址。</p></blockquote><p>通常main函数和其他函数组成一个文件模块，有一个文件名。对这个文件进行编译和连接，得到可执行文件(后缀为.exe)。用户执行这个可执行文件，操作系统就调用main函数，然后由main函数调用其他函数，从而完成程序的功能。</p><p>DOS命令行中的用法：</p><p><code>命令名 参数1 参数2 ... 参数n</code></p><p>假设可执行文件是filename.exe，现在想讲”China”，”BeiJing”作为参数传给main函数。</p><p>命令行可以写成以下形式：</p><p><code>filename China BeiJing</code></p><p>实际上文件名应该带上盘符，路径。(即完整路径)</p><h4 id="13-8-动态内存分配与指向它的指针变量"><a href="#13-8-动态内存分配与指向它的指针变量" class="headerlink" title="13.8 动态内存分配与指向它的指针变量"></a>13.8 动态内存分配与指向它的指针变量</h4><p>对内存的动态分配是通过系统提供的库函数来实现的，主要有 malloc、calloc、free、realloc这4个函数。</p><p><strong>1.用 malloc 函数开辟动态存储区</strong></p><p>其函数原型为： void * malloc(unsigned int size);</p><p>其作用是在内存动态存储区中分配一个长度为size的连续空间。形参size的类型定为无符号整型(不允许为负)。此函数的返回值是所分配区域的第一个字节的地址，或者说，此函数是一个指针型函数，返回的指针指向该分配域的第一个字节。</p><p>malloc 函数是从堆上分配一块内存，所分配的内存大小由该函数唯一的参数指定，返回值为void 指针，如果分配内存失败，就会返回NULL。此函数在分配内存时不会清空或修改内存，所以新分配的内存中包含有垃圾数据。</p><p>其用法为：<code>int * p = (int *)malloc(sizeof(int));</code></p><p><strong>2.用 calloc 函数开辟动态存储区</strong></p><p>calloc函数的原型为：<code>void *calloc(size_t numElements,size_t elementSize);</code><br>calloc 函数会根据numElements和elementSize两个参数乘积来分配内存，并返回一个指向内存的第一个字节的指针；如果分配失败，则返回NULL。与malloc函数不同是calloc函数会在分配内存的同时清空内存。其用法为：int * p = (int *)calloc(3,sizeof(int)); 这里就分配了3*4=12个字节。</p><p><strong>3.用 free 函数释放动态存储区</strong></p><p>free函数的原型为：<code>void free(void * p);</code></p><p>指针参数是指向malloc类函数分配的内存地址，这块内存会返还给堆。尽管指针仍然指向这块区域，但是我们应该将其看成是指向垃圾数据，可重新分配这块数据，并重新装进不同的数据。</p><p>free(p);</p><p><strong>4.用realloc函数重新分配动态存储区</strong></p><p>realloc函数原型为：<code>void * realloc(void *p, unsign int size);</code></p><p>如果已经通过 malloc 或者 calloc 函数获取了动态空间，想改变其大小，可以用 realloc 函数重新分配。</p><p>用 realloc 函数将p所指向的动态空间的大小改变为 size。p的值不变。如果重新分配不成功，返回NULL。</p><p>如：realloc(p,50)    //将p所指向的已分配的动态空间改为50字节</p><h4 id="13-9-C指针总结"><a href="#13-9-C指针总结" class="headerlink" title="13.9 C指针总结"></a>13.9 C指针总结</h4><p><a href="http://c.biancheng.net/c/80/">指针</a>（Pointer）就是内存的地址，C语言允许用一个变量来存放指针，这种变量称为指针变量。指针变量可以存放基本类型数据的地址，也可以存放数组、函数以及其他指针变量的地址。</p><p>程序在运行过程中需要的是数据和指令的地址，变量名、函数名、字符串名和数组名在本质上是一样的，它们都是地址的助记符：在编写代码的过程中，我们认为变量名表示的是数据本身，而函数名、字符串名和数组名表示的是代码块或数据块的首地址；程序被编译和链接后，这些名字都会消失，取而代之的是它们对应的地址。</p><p>常见指针变量的定义：</p><table><thead><tr><th>定  义</th><th>含  义</th></tr></thead><tbody><tr><td>int *p;</td><td>p 可以指向 int 类型的数据，也可以指向类似 int arr[n] 的数组。</td></tr><tr><td>int **p;</td><td>p 为二级指针，指向 int * 类型的数据。</td></tr><tr><td>int *p[n];</td><td>p 为指针数组。[ ] 的优先级高于 *，所以应该理解为 int *(p[n]);</td></tr><tr><td>int (*p)[n];</td><td>p 为<a href="http://c.biancheng.net/c/array/">二维数组</a>指针。</td></tr><tr><td>int *p();</td><td>p 是一个函数，它的返回值类型为 int *。</td></tr><tr><td>int (*p)();</td><td>p 是一个函数指针，指向原型为 int func() 的函数。</td></tr></tbody></table><ol><li><p>指针变量可以进行加减运算，例如<code>p++</code>、<code>p+i</code>、<code>p-=i</code>。指针变量的加减运算并不是简单的加上或减去一个整数，而是跟指针指向的数据类型有关。</p></li><li><p>给指针变量赋值时，要将一份数据的地址赋给它，不能直接赋给一个整数，例如<code>int *p = 1000;</code>是没有意义的，使用过程中一般会导致程序崩溃。</p></li><li><p>使用指针变量之前一定要初始化，否则就不能确定指针指向哪里，如果它指向的内存没有使用权限，程序就崩溃了。对于暂时没有指向的指针，建议赋值<code>NULL</code>。</p></li><li><p>两个指针变量可以相减。如果两个指针变量指向同一个数组中的某个元素，那么相减的结果就是两个指针之间相差的元素个数。</p></li><li><p>数组也是有类型的，数组名的本意是表示一组类型相同的数据。在定义数组时，或者和 sizeof、&amp; 运算符一起使用时数组名才表示整个数组，表达式中的数组名会被转换为一个指向数组的指针。</p></li></ol><h3 id="14-结构体"><a href="#14-结构体" class="headerlink" title="14. 结构体"></a>14. 结构体</h3><h4 id="1-结构体的定义"><a href="#1-结构体的定义" class="headerlink" title="1. 结构体的定义"></a>1. 结构体的定义</h4><p><strong>结构体（Struct）</strong>来存放一组不同类型的数据。结构体的定义形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名&#123;</span></span><br><span class="line">  结构体所包含的变量或数组</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构体是一种集合，它里面包含了多个变量或数组，它们的类型可以相同，也可以不同，每个这样的变量或数组都称为结构体的成员（Member）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> group;  <span class="comment">//所在学习小组</span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//成绩</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>stu 为结构体名，它包含了 5 个成员，分别是 name、num、age、group、score。结构体成员的定义方式与变量和数组的定义方式相同，只是不能初始化。</p><blockquote><p>注意大括号后面的分号<code>;</code>不能少，这是一条完整的语句。</p></blockquote><p>定义结构体变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">stud1</span>,<span class="title">stud2</span>;</span></span><br></pre></td></tr></table></figure><p>结构体也是一种数据类型，它由程序员自己定义，可以包含多个其他类型的数据。</p><p>像 int、float、char 等是由C语言本身提供的数据类型，不能再进行分拆，我们称之为基本数据类型；而结构体可以包含多个基本类型的数据，也可以包含其他的结构体，我们将它称为复杂数据类型或构造数据类型。</p><p>定义结构体的同时定义结构体变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> group;  <span class="comment">//所在学习小组</span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//成绩</span></span><br><span class="line">&#125; stu1, stu2;</span><br></pre></td></tr></table></figure><p>将变量放在结构体定义的最后即可。</p><p>如果只需要 stu1、stu2 两个变量，后面不需要再使用结构体名定义其他变量，那么在定义时也可以不给出结构体名，书写简单，但是因为没有结构体名，后面就没法用该结构体定义新的变量。</p><p>理论上讲结构体的各个成员在内存中是连续存储的，和数组非常类似，例如上面的结构体变量 stu1、stu2 的内存分布如下图所示，共占用 4+4+4+1+4 = 17 个字节。</p><p><img src="/../images/C/150GQ243-0.jpg" alt="img"></p><p>但是在编译器的具体实现中，各个成员之间可能会存在缝隙，对于 stu1、stu2，成员变量 group 和 score 之间就存在 3 个字节的空白填充。这样算来，stu1、stu2 其实占用了 17 + 3 = 20 个字节。</p><p><img src="/../images/C/150GUE0-1.jpg" alt="img"></p><h4 id="2-成员变量的赋值"><a href="#2-成员变量的赋值" class="headerlink" title="2. 成员变量的赋值"></a>2. 成员变量的赋值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给结构体成员赋值</span></span><br><span class="line">stud1.name = <span class="string">&quot;harvey&quot;</span>;</span><br><span class="line">stud1.num = <span class="number">22</span>;</span><br></pre></td></tr></table></figure><p>除了可以对成员进行逐一赋值，也可以在定义时整体赋值，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> group;  <span class="comment">//所在小组</span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//成绩</span></span><br><span class="line">&#125; stud1, stud2 = &#123; <span class="string">&quot;harvey&quot;</span>, <span class="number">12122</span>, <span class="number">22</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">98.0</span> &#125;;</span><br></pre></td></tr></table></figure><h4 id="3-结构体数组"><a href="#3-结构体数组" class="headerlink" title="3. 结构体数组"></a>3. 结构体数组</h4><p>在C语言中，定义结构体数组和定义结构体变量的方式类似。</p><p>只需要把变量名改为数组即可，即把stud1改为class[3]。当然也可以不定义大小，c会自动判断。</p><p>结构体数组在定义的同时也可以初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> group;  <span class="comment">//所在小组 </span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//成绩</span></span><br><span class="line">&#125;<span class="class"><span class="keyword">class</span>[3] =</span> &#123;<span class="comment">//此处3可省略</span></span><br><span class="line">    &#123;<span class="string">&quot;Li ping&quot;</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">145.0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Zhang ping&quot;</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">130.5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;He fang&quot;</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">148.5</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以定义之后再赋值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> group;  <span class="comment">//所在小组 </span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//成绩</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="keyword">class</span>[3]=</span>&#123;<span class="comment">//此处3可省略</span></span><br><span class="line">    &#123;<span class="string">&quot;Li ping&quot;</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">145.0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Zhang ping&quot;</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">130.5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;He fang&quot;</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">148.5</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-结构体指针"><a href="#4-结构体指针" class="headerlink" title="4. 结构体指针"></a>4. 结构体指针</h4><p>定义形式一般为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 *变量名;</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> group;  <span class="comment">//所在小组</span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//成绩</span></span><br><span class="line">&#125;stud1 = &#123; <span class="string">&quot;harvey&quot;</span>, <span class="number">12122</span>, <span class="number">22</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">98.0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span>=</span>&amp;stud1;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span>;</span></span><br><span class="line">p=&amp;stud1;</span><br></pre></td></tr></table></figure><p>获取结构体成员变量，一般形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(*pointer).memberName</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">pointer-&gt;memberName</span><br></pre></td></tr></table></figure><p>结构体指针的使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> group;  <span class="comment">//所在小组</span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//成绩</span></span><br><span class="line">&#125;studs[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Zhou ping&quot;</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">145.0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Zhang ping&quot;</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">130.5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Liu fang&quot;</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">148.5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Cheng ling&quot;</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">139.0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Wang ming&quot;</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">144.5</span>&#125;</span><br><span class="line">&#125;, *ps;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//求数组长度</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(studs) / <span class="keyword">sizeof</span>(struct stu);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name\t\tNum\tAge\tGroup\tScore\t\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(ps=studs; ps&lt;studs+len; ps++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\t%d\t%d\t%c\t%.1f\n&quot;</span>, ps-&gt;name, ps-&gt;num, ps-&gt;age, ps-&gt;group, ps-&gt;score);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结构体指针作为函数参数：</strong></p><p>结构体变量名代表的是整个集合本身，作为函数参数时传递的整个集合，也就是所有成员，而不是像数组一样被编译器转换成一个指针。如果结构体成员较多，尤其是成员为数组时，传送的时间和空间开销会很大，影响程序的运行效率。所以最好的办法就是使用结构体指针，这时由实参传向形参的只是一个地址，非常快速。</p><p>【示例】计算全班学生的总成绩、平均成绩和以及 140 分以下的人数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> group;  <span class="comment">//所在小组</span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//成绩</span></span><br><span class="line">&#125;stus[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Li ping&quot;</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">145.0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Zhang ping&quot;</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">130.5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;He fang&quot;</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">148.5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Cheng ling&quot;</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">139.0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Wang ming&quot;</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">144.5</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">average</span><span class="params">(struct stu *ps, <span class="keyword">int</span> len)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(stus) / <span class="keyword">sizeof</span>(struct stu);</span><br><span class="line">    average(stus, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">average</span><span class="params">(struct stu *ps, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, num_140 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> average, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        sum += (ps + i) -&gt; score;</span><br><span class="line">        <span class="keyword">if</span>((ps + i)-&gt;score &lt; <span class="number">140</span>) num_140++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%.2f\naverage=%.2f\nnum_140=%d\n&quot;</span>, sum, sum/<span class="number">5</span>, num_140);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-枚举类型"><a href="#5-枚举类型" class="headerlink" title="5. 枚举类型"></a>5. 枚举类型</h4><p>枚举类型的定义形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">typeName</span>&#123;</span> valueName1, valueName2, valueName3, ...... &#125;;</span><br></pre></td></tr></table></figure><p><code>enum</code>是一个新的关键字，专门用来定义枚举类型，这也是它在C语言中的唯一用途；<code>typeName</code>是枚举类型的名字；<code>valueName1, valueName2, valueName3, ......</code>是每个值对应的名字的列表。注意最后的<code>;</code>不能少。</p><p>【示例】判断用户输入的是星期几。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//枚举值从起始值开始递增， Mon、Tues、Wed 等都是常量，不能对它们赋值，只能将它们的值赋给其他的变量。</span></span><br><span class="line">    <span class="comment">//在编译时某时刻会把Mon=1， Tues=2...Sun=7</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">week</span>&#123;</span> Mon = <span class="number">1</span>, Tues, Wed, Thurs, Fri, Sat, Sun &#125; day;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line">    <span class="keyword">switch</span>(day)&#123;</span><br><span class="line">        <span class="keyword">case</span> Mon: <span class="built_in">puts</span>(<span class="string">&quot;Monday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Tues: <span class="built_in">puts</span>(<span class="string">&quot;Tuesday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Wed: <span class="built_in">puts</span>(<span class="string">&quot;Wednesday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Thurs: <span class="built_in">puts</span>(<span class="string">&quot;Thursday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Fri: <span class="built_in">puts</span>(<span class="string">&quot;Friday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Sat: <span class="built_in">puts</span>(<span class="string">&quot;Saturday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Sun: <span class="built_in">puts</span>(<span class="string">&quot;Sunday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-共用体"><a href="#6-共用体" class="headerlink" title="6. 共用体"></a>6. 共用体</h4><p>也叫联合体，定义格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> 共用体名&#123;</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125;变量名;</span><br></pre></td></tr></table></figure><p>结构体和共用体的区别在于：结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。</p><p>注：本文借鉴<a href="http://c.biancheng.net/">http://c.biancheng.net/</a> 的C语言部分。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;C语言的重要程度，自然不用说，数据结构这门课，一般都是用C/C++语言来编写程序案例，所以题目上一般也都要求使用C/C++编写程序，只能又看了一遍C，自然C++比C好用，但是C++现在也没时间重新学习，所以C语言是最佳选择，那么接下来就看一下新get到的知识。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="考研复习新知" scheme="https://yhking.tk/categories/%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0%E6%96%B0%E7%9F%A5/"/>
    
    
    <category term="C知识新知" scheme="https://yhking.tk/tags/C%E7%9F%A5%E8%AF%86%E6%96%B0%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Qv2ray的安装与使用</title>
    <link href="https://yhking.tk/2021/04/27/Qv2ray%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://yhking.tk/2021/04/27/Qv2ray%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2021-04-27T10:32:18.000Z</published>
    <updated>2021-05-09T08:59:44.804Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Linux 科学上网，使用Qv2ray客户端</p></blockquote><span id="more"></span><h3 id="1-天翼云盘下载Qv2ray"><a href="#1-天翼云盘下载Qv2ray" class="headerlink" title="1. 天翼云盘下载Qv2ray"></a>1. 天翼云盘下载Qv2ray</h3><p>里面包括 <code>执行文件</code>和<code>核心文件</code></p><p>天翼云盘<a href="https://cloud.189.cn/t/6bMbqmMnYNfi">下载地址</a>（访问码：5aml）</p><h3 id="2-执行AppImage文件"><a href="#2-执行AppImage文件" class="headerlink" title="2. 执行AppImage文件"></a>2. 执行AppImage文件</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod +x  Qv2ray-refs.tags.v1.99.6-linux.AppImage</span><br><span class="line">$ ./Qv2ray-refs.tags.v1.99.6-linux.AppImage</span><br></pre></td></tr></table></figure><h3 id="3-配置文件路径"><a href="#3-配置文件路径" class="headerlink" title="3. 配置文件路径"></a>3. 配置文件路径</h3><p>点击首选项, 第一个为v2ray路径，第二个为v2ray所在路径</p><img src="https://gitee.com/yhking/picture-in-markdown/raw/master/markdown%E6%89%80%E7%94%A8%E5%9B%BE%E7%89%87/Qv2ray_1.png" alt="1" style="zoom: 67%;" /><img src="https://gitee.com/yhking/picture-in-markdown/raw/master/markdown%E6%89%80%E7%94%A8%E5%9B%BE%E7%89%87/Qv2ray_2.png" alt="2" style="zoom:67%;" /><h3 id="4-订阅"><a href="#4-订阅" class="headerlink" title="4. 订阅"></a>4. 订阅</h3><img src="https://gitee.com/yhking/picture-in-markdown/raw/master/markdown%E6%89%80%E7%94%A8%E5%9B%BE%E7%89%87/Qv2ray_3.png" alt="3" style="zoom:67%;" /><img src="https://gitee.com/yhking/picture-in-markdown/raw/master/markdown%E6%89%80%E7%94%A8%E5%9B%BE%E7%89%87/Qv2ray_4.png" alt="4" style="zoom:67%;" /><h3 id="5-开启代理"><a href="#5-开启代理" class="headerlink" title="5. 开启代理"></a>5. 开启代理</h3><img src="https://gitee.com/yhking/picture-in-markdown/raw/master/markdown%E6%89%80%E7%94%A8%E5%9B%BE%E7%89%87/Qv2ray_5.png" alt="5" style="zoom:67%;" />]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Linux 科学上网，使用Qv2ray客户端&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Surf the Internet with science" scheme="https://yhking.tk/categories/Surf-the-Internet-with-science/"/>
    
    
    <category term="science" scheme="https://yhking.tk/tags/science/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy的基础使用</title>
    <link href="https://yhking.tk/2021/04/27/Scrapy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://yhking.tk/2021/04/27/Scrapy%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-04-27T10:32:18.000Z</published>
    <updated>2021-05-09T09:01:07.794Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Scrapy是适用于Python的一个快速、高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和<a href="https://baike.baidu.com/item/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/9815698">自动化测试</a>。Scrapy吸引人的地方在于它是一个框架，任何人都可以根据需求方便的修改。它也提供了多种类型爬虫的基类，如BaseSpider、sitemap爬虫等，最新版本又提供了web2.0爬虫的支持。</p></blockquote><span id="more"></span><h2 id="Spider-Scrapy"><a href="#Spider-Scrapy" class="headerlink" title="Spider-Scrapy"></a>Spider-Scrapy</h2><h3 id="1-安装-Scrapy"><a href="#1-安装-Scrapy" class="headerlink" title="1. 安装 Scrapy"></a>1. 安装 Scrapy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install scrapy</span><br></pre></td></tr></table></figure><p>If you haven’t installed PIP, you can see mine.</p><h3 id="2-Scrapy原理"><a href="#2-Scrapy原理" class="headerlink" title="2. Scrapy原理"></a>2. Scrapy原理</h3><p><img src="/../images/scrapy/scrapy1.png" alt="Scrapy原理图"></p><h3 id="3-新建工程"><a href="#3-新建工程" class="headerlink" title="3.新建工程"></a>3.新建工程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &quot;firstSpider&quot; is projectname</span></span><br><span class="line">$ scrapy startproject firstSpider</span><br></pre></td></tr></table></figure><h3 id="4-目录结构"><a href="#4-目录结构" class="headerlink" title="4. 目录结构"></a>4. 目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Scrapy</span><br><span class="line">scrapy startproject sp1</span><br><span class="line"></span><br><span class="line">sp1</span><br><span class="line">- sp1</span><br><span class="line">- spiders      爬虫文件目录</span><br><span class="line">- items   格式化</span><br><span class="line">- middlewares  中间件</span><br><span class="line">- pipelines   持久化</span><br><span class="line">- settings   配置文件</span><br><span class="line">- scrapy.cfg配置</span><br></pre></td></tr></table></figure><h3 id="5-创建爬虫"><a href="#5-创建爬虫" class="headerlink" title="5. 创建爬虫"></a>5. 创建爬虫</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> firstSpider</span><br><span class="line">$ scrapy genspider baidu baidu.com</span><br></pre></td></tr></table></figure><p>The baidu is spider’s name, The baidu.com is area covered by the spider.</p><h3 id="6-执行"><a href="#6-执行" class="headerlink" title="6. 执行"></a>6. 执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy crawl baidu [--nolog]</span><br></pre></td></tr></table></figure><h3 id="7-君子协议"><a href="#7-君子协议" class="headerlink" title="7. 君子协议"></a>7. 君子协议</h3><p>Set “Obey robots.txt rules” to False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you don&#x27;t get what you want</span></span><br><span class="line"><span class="comment"># Modify the Settings.py file</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br></pre></td></tr></table></figure><hr><h2 id="Based-on-using"><a href="#Based-on-using" class="headerlink" title="Based on using"></a>Based on using</h2><h3 id="1-起始URL"><a href="#1-起始URL" class="headerlink" title="1. 起始URL"></a>1. 起始URL</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TianqihoubaoSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;tianqihoubao&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;tianqihoubao.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://tianqihoubao.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</span><br><span class="line">            <span class="keyword">yield</span> Request(url, dont_filter=<span class="literal">True</span>, callback=self.parse1)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse1</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="2-POST-请求头"><a href="#2-POST-请求头" class="headerlink" title="2. POST 请求头"></a>2. POST 请求头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">requests.get(params=&#123;&#125;, headers=&#123;&#125;, cookies=&#123;&#125;)</span><br><span class="line">requests.post(params=&#123;&#125;, headers=&#123;&#125;, cookies=&#123;&#125;, data=&#123;&#125;, json=&#123;&#125;)</span><br><span class="line"></span><br><span class="line">GET request:</span><br><span class="line">    url,</span><br><span class="line">    method=<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    headers=&#123;&#125;,</span><br><span class="line">    cookies=&#123;&#125;, <span class="keyword">or</span> cookiejar</span><br><span class="line">    </span><br><span class="line">POST request:</span><br><span class="line">    url,</span><br><span class="line">    method=<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    headers=&#123;&#125;,</span><br><span class="line">    cookies=&#123;&#125;, <span class="keyword">or</span> cookiejar</span><br><span class="line">    body=<span class="literal">None</span>,</span><br><span class="line">        form_data=&#123;</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;yh&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pwd&#x27;</span>:<span class="string">&#x27;123&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">import</span> urllib.parse</span><br><span class="line">        urllib.parse.urlencode()</span><br><span class="line">    </span><br><span class="line">        JSON</span><br><span class="line">        json.dumps()</span><br></pre></td></tr></table></figure><h3 id="3-持久化"><a href="#3-持久化" class="headerlink" title="3. 持久化"></a>3. 持久化</h3><ul><li>pipeline执行前提</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># items, pipelines</span></span><br><span class="line">- spider中yeild Item对象</span><br><span class="line">    - settings.py中注册</span><br><span class="line">    ITEM_PIPELINES = &#123;</span><br><span class="line">           <span class="string">&#x27;firstSpider.pipelines.FirstspiderPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">           <span class="string">&#x27;firstSpider.pipelines.FirstspiderPipeline2&#x27;</span>: <span class="number">120</span>,</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>pipeline的编写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstspiderPipeline</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.f = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param item: 爬虫中yeild回来的对象</span></span><br><span class="line"><span class="string">        :param spider: 爬虫对象JandanSpider()</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        self.f.write(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawl</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化的时候，用于创建pipline对象</span></span><br><span class="line"><span class="string">        :param crawler:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 从配置文件中取值</span></span><br><span class="line">        <span class="comment"># val = crawler.settings.getint(&#x27;MMM&#x27;)</span></span><br><span class="line">        <span class="comment"># return cls(val)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># from scrapy.exceptions import DropItem</span></span><br><span class="line">        <span class="comment"># raise DropItem()  下一个的pipeline的process_item方法不再执行</span></span><br><span class="line">        <span class="keyword">return</span> cls()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---------开启爬虫---------&#x27;</span>)</span><br><span class="line">        self.f = <span class="built_in">open</span>(<span class="string">&#x27;text.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;--------关闭爬虫--------&#x27;</span>)</span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure><ul><li>pipeline的执行过程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pipline的执行过程：</span></span><br><span class="line"><span class="string">    1.首先检测pipline中是否有from_crawl方法</span></span><br><span class="line"><span class="string">    如果有：</span></span><br><span class="line"><span class="string">        obj = 执行类.from_crawl()</span></span><br><span class="line"><span class="string">    如果没有：</span></span><br><span class="line"><span class="string">        obj = 类()</span></span><br><span class="line"><span class="string">    2.执行open_spider()</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">        3.执行from_crawl()  循环执行直至结束</span></span><br><span class="line"><span class="string">    4.执行close_spider()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>PipeLine是全局生效，所有爬虫都会执行，个别做特殊操作：spider.name</p><h3 id="4-自定义扩展"><a href="#4-自定义扩展" class="headerlink" title="4. 自定义扩展"></a>4. 自定义扩展</h3><ul><li>基于信号的自定义扩展</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExtend</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">        val = crawler.settings.getint(<span class="string">&#x27;MMM&#x27;</span>)</span><br><span class="line">        ext = cls(val)</span><br><span class="line">        <span class="comment"># 在scrapy中注册信号 spider_opened， spider_open为触发的函数</span></span><br><span class="line">        crawler.signals.connect(ext.spider_open, signal=signals.spider_opened)</span><br><span class="line">        <span class="comment"># 在scrapy中注册信号 spider_closed， spider_close为触发的函数</span></span><br><span class="line">        crawler.signals.connect(ext.spider_close, signal=signals.spider_closed)</span><br><span class="line">        <span class="keyword">return</span> ext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_open</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_close</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;close&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>在settings.py中开启注册</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXTENSIONS = &#123;</span><br><span class="line">    <span class="string">&#x27;scrapy.extensions.telnet.TelnetConsole&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义扩展可用的信号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">engine_starten = <span class="built_in">object</span>()</span><br><span class="line">engine_stopped = <span class="built_in">object</span>()</span><br><span class="line">spider_opened = <span class="built_in">object</span>()</span><br><span class="line">spider_idle = <span class="built_in">object</span>()</span><br><span class="line">spider_closed = <span class="built_in">object</span>()</span><br><span class="line">spider_error = <span class="built_in">object</span>()</span><br><span class="line">request_scheduled = <span class="built_in">object</span>()</span><br><span class="line">request_dropped = <span class="built_in">object</span>()</span><br><span class="line">response_received = <span class="built_in">object</span>()</span><br><span class="line">response_downloaded = <span class="built_in">object</span>()</span><br><span class="line">item_scraped = <span class="built_in">object</span>()</span><br><span class="line">item_dropped = <span class="built_in">object</span>()</span><br></pre></td></tr></table></figure><h3 id="5-自定义去重规则"><a href="#5-自定义去重规则" class="headerlink" title="5. 自定义去重规则"></a>5. 自定义去重规则</h3><ul><li>新建文件，例：rep.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepeatUrl</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.visited_url = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_settings</span>(<span class="params">cls, settings</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化时调用</span></span><br><span class="line"><span class="string">        :param settings: 配置文件</span></span><br><span class="line"><span class="string">        :return: 实例化对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cls()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_seen</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        检测请求是否被检测过</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :return: True表示被访问过，False表示未被访问</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> request.url <span class="keyword">in</span> self.visited_url:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        self.visited_url.add(request.url)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        开始爬去请求时调用</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        结束请求时调用</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;close&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        记录日志</span></span><br><span class="line"><span class="string">        :param spider:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;记录日志&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在settings.py中注册</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DUPEFILTER_CLASS = <span class="string">&#x27;sp1.rep.RepeatUrl&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Scrapy是适用于Python的一个快速、高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和&lt;a href=&quot;https://baike.baidu.com/item/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/9815698&quot;&gt;自动化测试&lt;/a&gt;。Scrapy吸引人的地方在于它是一个框架，任何人都可以根据需求方便的修改。它也提供了多种类型爬虫的基类，如BaseSpider、sitemap爬虫等，最新版本又提供了web2.0爬虫的支持。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Spider -- Scrapy" scheme="https://yhking.tk/categories/Spider-Scrapy/"/>
    
    
    <category term="Spider" scheme="https://yhking.tk/tags/Spider/"/>
    
  </entry>
  
  <entry>
    <title>Git的使用</title>
    <link href="https://yhking.tk/2021/04/27/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://yhking.tk/2021/04/27/git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-04-27T10:32:18.000Z</published>
    <updated>2021-05-09T08:54:47.829Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。是 <a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429?fromtitle=Linus%20Torvalds&fromid=9336769">Linus Torvalds</a> 为了帮助管理 <a href="https://baike.baidu.com/item/Linux/27050">Linux </a>内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><span id="more"></span><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt install git</span><br></pre></td></tr></table></figure><h3 id="2-给git新建一个文件夹"><a href="#2-给git新建一个文件夹" class="headerlink" title="2. 给git新建一个文件夹"></a>2. 给git新建一个文件夹</h3><h3 id="3-初始化本地文件夹"><a href="#3-初始化本地文件夹" class="headerlink" title="3. 初始化本地文件夹"></a>3. 初始化本地文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">&#x27;new folder&#x27;</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><h3 id="4-添加远程仓库-并pull到本地"><a href="#4-添加远程仓库-并pull到本地" class="headerlink" title="4. 添加远程仓库, 并pull到本地"></a>4. 添加远程仓库, 并pull到本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add a remote repository, from the remote repository to pull the repository files to the local</span></span><br><span class="line">$ git remote add origin https://gitee.com/username/reponame </span><br><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><h3 id="5-把文件放到git文件夹"><a href="#5-把文件放到git文件夹" class="headerlink" title="5. 把文件放到git文件夹"></a>5. 把文件放到git文件夹</h3><p><code>Place the files to be uploaded under the new folder</code></p><h3 id="6-保存到缓冲区"><a href="#6-保存到缓冲区" class="headerlink" title="6. 保存到缓冲区"></a>6. 保存到缓冲区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .(|git add filename)</span><br></pre></td></tr></table></figure><h3 id="7-添加信息"><a href="#7-添加信息" class="headerlink" title="7. 添加信息"></a>7. 添加信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tell the repository your email address and user name</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br></pre></td></tr></table></figure><h3 id="8-添加描述"><a href="#8-添加描述" class="headerlink" title="8. 添加描述"></a>8. 添加描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add submission file description</span></span><br><span class="line">$ git commit -m <span class="string">&#x27;your description&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="9-Push本地文件到远程仓库"><a href="#9-Push本地文件到远程仓库" class="headerlink" title="9. Push本地文件到远程仓库"></a>9. Push本地文件到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Push the local repository to the remote repository</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><hr><p><em><strong>note：If  ‘Could not resolve host’ appears, It could be a system agent, you need to cancel it.</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">unset</span> http_proxy</span><br><span class="line">$ http_proxy=<span class="string">&quot;&quot;</span></span><br><span class="line">$ <span class="built_in">unset</span> https_proxy</span><br><span class="line">$ https_proxy=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。是 &lt;a href=&quot;https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429?fromtitle=Linus%20Torvalds&amp;fromid=9336769&quot;&gt;Linus Torvalds&lt;/a&gt; 为了帮助管理 &lt;a href=&quot;https://baike.baidu.com/item/Linux/27050&quot;&gt;Linux &lt;/a&gt;内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="The use of software" scheme="https://yhking.tk/categories/The-use-of-software/"/>
    
    
    <category term="software" scheme="https://yhking.tk/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装MySQL</title>
    <link href="https://yhking.tk/2021/04/27/linux%E5%AE%89%E8%A3%85MySQL/"/>
    <id>https://yhking.tk/2021/04/27/linux%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2021-04-27T10:32:18.000Z</published>
    <updated>2021-05-09T08:25:16.683Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>MySQL是一个<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511">关系型数据库管理系统</a>，由瑞典MySQL AB 公司开发，属于 <a href="https://baike.baidu.com/item/Oracle">Oracle</a> 旗下产品。MySQL 是最流行的<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511">关系型数据库管理系统</a>之一，在 WEB 应用方面，MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p></blockquote><span id="more"></span><p>MySQL所使用的 SQL 语言是用于访问<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E7%A0%81/7176422">开放源码</a>这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libmecab2 libjson-perl</span><br></pre></td></tr></table></figure><h3 id="2-下载-MySQL"><a href="#2-下载-MySQL" class="headerlink" title="2. 下载 MySQL"></a>2. 下载 MySQL</h3><p> <a href="https://dev.mysql.com/downloads/mysql/">Official website</a> to download</p><p>Debian <a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-server_8.0.23-1debian10_amd64.deb-bundle.tar">MySQL8.0</a> download</p><h3 id="3-解压"><a href="#3-解压" class="headerlink" title="3. 解压"></a>3. 解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar zxvf XXX.tar</span><br></pre></td></tr></table></figure><h3 id="4-Install-MySQL"><a href="#4-Install-MySQL" class="headerlink" title="4. Install MySQL"></a>4. Install MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg -i mysql-&#123;common,community-client,community-client-plugins,community-client-core,client,community-server,community-server-core,server&#125;_*.deb</span><br></pre></td></tr></table></figure><h3 id="5-Login-MySQL"><a href="#5-Login-MySQL" class="headerlink" title="5. Login MySQL"></a>5. Login MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">xxxx</span><br></pre></td></tr></table></figure><h3 id="6-Other"><a href="#6-Other" class="headerlink" title="6. Other"></a>6. Other</h3><h4 id="Change-the-password"><a href="#Change-the-password" class="headerlink" title="Change the password"></a>Change the password</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h4 id="Modify-access-address"><a href="#Modify-access-address" class="headerlink" title="Modify access address"></a>Modify access address</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE mysql.user set host &#x3D; &#39;%&#39;,plugin&#x3D;&#39;mysql_native_password&#39; where user&#x3D;&#39;root&#39;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h3 id="7-Restart-the-MySQL"><a href="#7-Restart-the-MySQL" class="headerlink" title="7. Restart the MySQL"></a>7. Restart the MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;MySQL是一个&lt;a href=&quot;https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511&quot;&gt;关系型数据库管理系统&lt;/a&gt;，由瑞典MySQL AB 公司开发，属于 &lt;a href=&quot;https://baike.baidu.com/item/Oracle&quot;&gt;Oracle&lt;/a&gt; 旗下产品。MySQL 是最流行的&lt;a href=&quot;https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511&quot;&gt;关系型数据库管理系统&lt;/a&gt;之一，在 WEB 应用方面，MySQL是最好的 &lt;a href=&quot;https://baike.baidu.com/item/RDBMS/1048260&quot;&gt;RDBMS&lt;/a&gt; (Relational Database Management System，关系数据库管理系统) 应用软件之一。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Install software" scheme="https://yhking.tk/categories/Install-software/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux安装pip</title>
    <link href="https://yhking.tk/2021/04/27/linux%E5%AE%89%E8%A3%85pip/"/>
    <id>https://yhking.tk/2021/04/27/linux%E5%AE%89%E8%A3%85pip/</id>
    <published>2021-04-27T10:32:18.000Z</published>
    <updated>2021-05-09T08:25:34.492Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>pip 是一个现代的，通用的 <a href="https://baike.baidu.com/item/Python">Python</a> 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。</p></blockquote><span id="more"></span><h2 id="Linux-install-pip"><a href="#Linux-install-pip" class="headerlink" title="Linux install pip"></a>Linux install pip</h2><h3 id="1-下载脚本："><a href="#1-下载脚本：" class="headerlink" title="1. 下载脚本："></a>1. 下载脚本：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://gitee.com/yhking/script-file/raw/master/get-pip.py</span><br></pre></td></tr></table></figure><h3 id="2-加权限："><a href="#2-加权限：" class="headerlink" title="2. 加权限："></a>2. 加权限：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod +x get-pip.py</span><br></pre></td></tr></table></figure><h3 id="3-执行文件："><a href="#3-执行文件：" class="headerlink" title="3. 执行文件："></a>3. 执行文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./get-pip.py</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;pip 是一个现代的，通用的 &lt;a href=&quot;https://baike.baidu.com/item/Python&quot;&gt;Python&lt;/a&gt; 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="The use of software" scheme="https://yhking.tk/categories/The-use-of-software/"/>
    
    
  </entry>
  
  <entry>
    <title>终端美化</title>
    <link href="https://yhking.tk/2021/04/27/zsh%E7%BE%8E%E5%8C%96/"/>
    <id>https://yhking.tk/2021/04/27/zsh%E7%BE%8E%E5%8C%96/</id>
    <published>2021-04-27T10:32:18.000Z</published>
    <updated>2021-05-09T09:02:29.634Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Zsh（Z-shell）是一款用于交互式使用的shell，也可以作为脚本解释器来使用。其包含了 bash，ksh，tcsh 等其他shell中许多优秀功能，也拥有诸多自身特色。</p></blockquote><span id="more"></span><h3 id="1-安装所用工具"><a href="#1-安装所用工具" class="headerlink" title="1. 安装所用工具"></a>1. 安装所用工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install -y zsh</span><br><span class="line">$ sudo apt install -y wget</span><br><span class="line">$ sudo apt install -y git</span><br></pre></td></tr></table></figure><h3 id="2-下载并安装oh-my-zsh"><a href="#2-下载并安装oh-my-zsh" class="headerlink" title="2. 下载并安装oh-my-zsh"></a>2. 下载并安装oh-my-zsh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><h3 id="3-设置默认shell"><a href="#3-设置默认shell" class="headerlink" title="3. 设置默认shell"></a>3. 设置默认shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h3 id="3-配置-ZSH"><a href="#3-配置-ZSH" class="headerlink" title="3. 配置 ZSH"></a>3. 配置 ZSH</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim ~/.zshrc</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;YS&quot;</span></span><br><span class="line">plugins=(git ... ...)</span><br></pre></td></tr></table></figure><p><em><strong>Login again to take effect</strong></em></p><h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看存在的shell</span></span><br><span class="line">$ cat /etc/shells</span><br><span class="line"><span class="comment"># 查看当前shell</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Zsh（Z-shell）是一款用于交互式使用的shell，也可以作为脚本解释器来使用。其包含了 bash，ksh，tcsh 等其他shell中许多优秀功能，也拥有诸多自身特色。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Beautify the environment" scheme="https://yhking.tk/categories/Beautify-the-environment/"/>
    
    
    <category term="Beauty" scheme="https://yhking.tk/tags/Beauty/"/>
    
  </entry>
  
</feed>
